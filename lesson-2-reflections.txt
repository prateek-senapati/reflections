

MY REFLECTIONS (UDACITY / HOW TO USE GIT AND GITHUB / LESSON 2) : PRATEEK SENAPATI

What happens when you initialize a repository? Why do you need to do it?

	When we initialize a repository, Git starts to track any changes made to that repository. Git makes it easier for us to control different versions of our code.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Work present in the working directory is still not tracked by Git. The staging area is an intermediate between the working direcetory and the repository. The repository 
contains work that has been committed. The staging area contains work that is tracked by Git but has not been committed. So, the staging area still gives the user an option to 
change their minds before committing their work as th work present in the staging area can be unstaged easily.

How can you use the staging area to make sure you have one commit per logical
change?

	The staging area acts as an intermediate between thew working directory and the repository. We can have multiple small changes to our work that represent a single logical 
change We can add all these small changes to the staging area and save these changes in our repository as a single commit representing one logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Suppose we have two branches. Commits made in the second branch will modify the history of the second branch only. The commit history of the first branch will remain 
unchanged. In this way, we can access the commit history of the first branch (if we ever need to), which will remain intact irrespective of the changes made in the second branch.

How do the diagrams help you visualize the branch structure?

	The diagrams represent branching through lines, just like the branches of a tree. This helps in visualising where a new branch is created and what commits the branches have 
in common.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	
	The merging of two branches results in the creation of a single branch (considering that the non-checked-out branch is deleted) which contains updates and changes from both 
the branches. We represent merging in the diagram the way we do because merging actually combines the results of the commits from the two branches and puts them under a single 
label.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	Git's automatic merging will save a lot of time and effort by deciding which changes to keep and which ones to discard own its own. On the other hand, this feature might 
cause unexpected and unwanted errors as the changes and commits Git decides to keep might not be the ones we want Git to save in the repository. Therefore, merging branches manually 
is time-taking but a safer alternative.
